name: Terraform Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  TF_VERSION: "1.5.0"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Backend Resources (if needed)
        run: |
          echo "ðŸ”§ Setting up Terraform backend resources..."
          
          # Check if S3 bucket exists
          if aws s3 ls s3://tech-challenge-fiap-terraform-state-2025 >/dev/null 2>&1; then
            echo "âœ… S3 bucket 'tech-challenge-fiap-terraform-state-2025' already exists"
          else
            echo "ðŸ“¦ Creating S3 bucket for Terraform state..."
            aws s3 mb s3://tech-challenge-fiap-terraform-state-2025 --region us-east-1
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket tech-challenge-fiap-terraform-state-2025 \
              --versioning-configuration Status=Enabled
            
            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket tech-challenge-fiap-terraform-state-2025 \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
            
            # Block public access
            aws s3api put-public-access-block \
              --bucket tech-challenge-fiap-terraform-state-2025 \
              --public-access-block-configuration \
                BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            
            echo "âœ… S3 bucket created and configured"
          fi
          
          # Check if DynamoDB table exists
          if aws dynamodb describe-table --table-name tech-challenge-fiap-terraform-locks --region us-east-1 >/dev/null 2>&1; then
            echo "âœ… DynamoDB table 'tech-challenge-fiap-terraform-locks' already exists"
          else
            echo "ðŸ”’ Creating DynamoDB table for state locking..."
            aws dynamodb create-table \
              --table-name tech-challenge-fiap-terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region us-east-1
            
            echo "âœ… DynamoDB table created"
          fi
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Terraform Init with Backend
        run: |
          echo "ðŸ”§ Initializing Terraform with S3 backend..."
          terraform init \
            -backend-config="bucket=tech-challenge-fiap-terraform-state-2025" \
            -backend-config="key=infrastructure/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=tech-challenge-fiap-terraform-locks"
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Import existing resources (if any)
        run: |
          echo "ðŸ”§ Running CI resource import script..."
          ./scripts/ci-import-resources.sh
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        continue-on-error: true

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="aws_region=${{ vars.AWS_REGION }}" \
            -out=tfplan
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Terraform Apply
        run: |
          echo "ðŸš€ Applying Terraform configuration..."
          terraform apply tfplan
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        continue-on-error: true

      - name: Get EKS Cluster Info
        run: |
          echo "EKS Cluster Name: $(terraform output -raw eks_cluster_name)"
          echo "EKS Cluster Endpoint: $(terraform output -raw eks_cluster_endpoint)"
          echo "VPC ID: $(terraform output -raw vpc_id)"
          echo "Microservices Namespaces: $(terraform output -json microservices_namespaces)"
          echo "LoadBalancer Services: $(terraform output -json microservices_loadbalancer_endpoints)"
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Show LoadBalancer Endpoints
        run: |
          echo "ðŸ”§ Updating kubeconfig..."
          aws eks update-kubeconfig --name tech_challenge_cluster --region ${{ vars.AWS_REGION }}
          
          echo "ðŸ“¡ Checking LoadBalancer services..."
          echo ""
          echo "=== Products Service ==="
          kubectl get svc -n products-service
          echo ""
          echo "=== Orders Service ==="
          kubectl get svc -n orders-service
          echo ""
          echo "=== Payment Service ==="
          kubectl get svc -n payment-service
          echo ""
          echo "ðŸŽ‰ Your public endpoints are shown above in the EXTERNAL-IP column!"
          echo "ðŸ“± Access your products API at: http://[EXTERNAL-IP]:3001"
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        continue-on-error: true
